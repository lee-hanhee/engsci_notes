\babel@toc {english}{}\relax 
\contentsline {figure}{\numberline {1}{\ignorespaces Graphical examples of the Big-O, Big-Omega, and Big-Theta.}}{13}{figure.1}%
\contentsline {figure}{\numberline {2}{\ignorespaces Merge sort visualization, where we divide until there is one element, then merge by comparing them from least to greatest.}}{31}{figure.2}%
\contentsline {figure}{\numberline {3}{\ignorespaces Recursion tree that is made by subbing in the $T(\#)$ into the recurrence relation to get the nodes below.}}{39}{figure.3}%
\contentsline {figure}{\numberline {4}{\ignorespaces (a) Directed graph, (b) Undirected graph.}}{41}{figure.4}%
\contentsline {figure}{\numberline {5}{\ignorespaces Bipartite graph.}}{42}{figure.5}%
\contentsline {figure}{\numberline {6}{\ignorespaces Clique for 3 and 4.}}{42}{figure.6}%
\contentsline {figure}{\numberline {7}{\ignorespaces (i) Directed graph, (ii) Adjacency matrix, (iii) Adjacency list}}{43}{figure.7}%
\contentsline {figure}{\numberline {8}{\ignorespaces Choosing a node as the root, then making it a tree.}}{44}{figure.8}%
\contentsline {figure}{\numberline {9}{\ignorespaces (Left) Tree format heap. (Right) Array format heap with formulas for parent and children.}}{54}{figure.9}%
\contentsline {figure}{\numberline {10}{\ignorespaces Bubble down.}}{55}{figure.10}%
\contentsline {figure}{\numberline {11}{\ignorespaces Build heap.}}{56}{figure.11}%
\contentsline {figure}{\numberline {12}{\ignorespaces (a) Max-heap data structure after Build-Heap. (b)-(j) Extract max. (k) Sorted array.}}{57}{figure.12}%
\contentsline {figure}{\numberline {13}{\ignorespaces Quicksort example.}}{60}{figure.13}%
\contentsline {figure}{\numberline {14}{\ignorespaces Partition}}{60}{figure.14}%
\contentsline {figure}{\numberline {15}{\ignorespaces Quicksort average case in which each level is derived by subbing in the $T(\#)$ back into the equation above.}}{62}{figure.15}%
\contentsline {figure}{\numberline {16}{\ignorespaces Insertion sort.}}{66}{figure.16}%
\contentsline {figure}{\numberline {17}{\ignorespaces Example of counting sort}}{68}{figure.17}%
\contentsline {figure}{\numberline {18}{\ignorespaces Radix sort example}}{69}{figure.18}%
\contentsline {figure}{\numberline {19}{\ignorespaces Number of passes for 1000\#'s 64 bits.}}{70}{figure.19}%
\contentsline {figure}{\numberline {20}{\ignorespaces Tournament tree.}}{71}{figure.20}%
\contentsline {figure}{\numberline {21}{\ignorespaces BST property}}{73}{figure.21}%
\contentsline {figure}{\numberline {22}{\ignorespaces Example of the BST property.}}{73}{figure.22}%
\contentsline {figure}{\numberline {23}{\ignorespaces Delete BST}}{76}{figure.23}%
\contentsline {figure}{\numberline {24}{\ignorespaces Threaded trees.}}{76}{figure.24}%
\contentsline {figure}{\numberline {25}{\ignorespaces Red black trees.}}{78}{figure.25}%
\contentsline {figure}{\numberline {26}{\ignorespaces The triangles denote subtrees of $h-1$, then adding one node up top with another subtree completes a tree of height $h$. If the root is red, then its children must be black, but not the other way around.}}{79}{figure.26}%
\contentsline {figure}{\numberline {27}{\ignorespaces C1}}{81}{figure.27}%
\contentsline {figure}{\numberline {28}{\ignorespaces C2}}{81}{figure.28}%
\contentsline {figure}{\numberline {29}{\ignorespaces C3}}{81}{figure.29}%
\contentsline {figure}{\numberline {30}{\ignorespaces Difference between array and linked lists.}}{82}{figure.30}%
\contentsline {figure}{\numberline {31}{\ignorespaces Collisions happening between D and E and also C and F}}{83}{figure.31}%
\contentsline {figure}{\numberline {32}{\ignorespaces Clustering}}{85}{figure.32}%
\contentsline {figure}{\numberline {33}{\ignorespaces Fib numbers}}{88}{figure.33}%
\contentsline {figure}{\numberline {34}{\ignorespaces Why memoization is needed}}{89}{figure.34}%
\contentsline {figure}{\numberline {35}{\ignorespaces You do not need the whole 2D array, you just need the upper triangle of the 2D array. Calculate this table from the bottom up.}}{90}{figure.35}%
\contentsline {figure}{\numberline {36}{\ignorespaces Motivation for why memoization is needed.}}{93}{figure.36}%
\contentsline {figure}{\numberline {37}{\ignorespaces 2 by 2 matrix.}}{94}{figure.37}%
\contentsline {figure}{\numberline {38}{\ignorespaces Computation of C}}{95}{figure.38}%
\contentsline {figure}{\numberline {39}{\ignorespaces Class scheduling example.}}{96}{figure.39}%
\contentsline {figure}{\numberline {40}{\ignorespaces It is showing that you can replace $o$ by $g$. In the diagram, it uses $n$ instead of $m$, but same meaning (i.e. $n=m$).}}{96}{figure.40}%
\contentsline {figure}{\numberline {41}{\ignorespaces 45\% contains a, 13\% contains b, and so on. Converting this to binary using $d(c_1)$, which is fixed.}}{98}{figure.41}%
\contentsline {figure}{\numberline {42}{\ignorespaces $d(c_2)$ variable size encoding to account for assigning fewer bits to more frequent characters}}{98}{figure.42}%
\contentsline {figure}{\numberline {43}{\ignorespaces Tree}}{99}{figure.43}%
\contentsline {figure}{\numberline {44}{\ignorespaces T optimal, T' (swapped b and x from T optimal), and T'' (swapped y and c from T')}}{100}{figure.44}%
\contentsline {figure}{\numberline {45}{\ignorespaces Derivation.}}{101}{figure.45}%
\contentsline {figure}{\numberline {46}{\ignorespaces Accounting method.}}{103}{figure.46}%
\contentsline {figure}{\numberline {47}{\ignorespaces Aggregate method}}{103}{figure.47}%
\contentsline {figure}{\numberline {48}{\ignorespaces Derivation of amoritzed sense.}}{104}{figure.48}%
\contentsline {figure}{\numberline {49}{\ignorespaces Example 2}}{106}{figure.49}%
\contentsline {figure}{\numberline {50}{\ignorespaces Reason for time complexity for insert.}}{106}{figure.50}%
\contentsline {figure}{\numberline {51}{\ignorespaces Split}}{107}{figure.51}%
\contentsline {figure}{\numberline {52}{\ignorespaces Join.}}{107}{figure.52}%
\contentsline {figure}{\numberline {53}{\ignorespaces Proof of zig zig}}{108}{figure.53}%
\contentsline {figure}{\numberline {54}{\ignorespaces Proof of zig zag and zig}}{108}{figure.54}%
\contentsline {figure}{\numberline {55}{\ignorespaces PROOF by telescoping.}}{109}{figure.55}%
\contentsline {figure}{\numberline {56}{\ignorespaces BFS.}}{110}{figure.56}%
\contentsline {figure}{\numberline {57}{\ignorespaces DFS}}{111}{figure.57}%
\contentsline {figure}{\numberline {58}{\ignorespaces DFS Forest}}{111}{figure.58}%
\contentsline {figure}{\numberline {59}{\ignorespaces Well-parenthesis theorem}}{112}{figure.59}%
\contentsline {figure}{\numberline {60}{\ignorespaces Topological sort.}}{112}{figure.60}%
\contentsline {figure}{\numberline {61}{\ignorespaces Minimum Spanning Tree}}{114}{figure.61}%
\contentsline {figure}{\numberline {62}{\ignorespaces MST Diagram}}{115}{figure.62}%
\contentsline {figure}{\numberline {63}{\ignorespaces Prim's Algorithm}}{116}{figure.63}%
\contentsline {figure}{\numberline {64}{\ignorespaces Shortest Path}}{117}{figure.64}%
\contentsline {figure}{\numberline {65}{\ignorespaces Edge relaxation.}}{118}{figure.65}%
\contentsline {figure}{\numberline {66}{\ignorespaces Example of edge relaxation: Relaxation from 10 to 8 and non-relaxation cases.}}{119}{figure.66}%
\contentsline {figure}{\numberline {67}{\ignorespaces Example of single source shortest paths on DAG with positive and negative weights.}}{119}{figure.67}%
\contentsline {figure}{\numberline {68}{\ignorespaces Negative cycle.}}{121}{figure.68}%
\contentsline {figure}{\numberline {69}{\ignorespaces Example of a constraint graph.}}{122}{figure.69}%
\contentsline {figure}{\numberline {70}{\ignorespaces Maximum Flow Diagram}}{123}{figure.70}%
\contentsline {figure}{\numberline {71}{\ignorespaces Equivalent Graph Transformation}}{124}{figure.71}%
\contentsline {figure}{\numberline {72}{\ignorespaces Residual Network Example}}{125}{figure.72}%
\contentsline {figure}{\numberline {73}{\ignorespaces Ford-Fulkerson Algorithm Steps}}{126}{figure.73}%
\contentsline {figure}{\numberline {74}{\ignorespaces Ford-Fulkerson Algorithm Example}}{127}{figure.74}%
\contentsline {figure}{\numberline {75}{\ignorespaces Capacity of a Cut Example}}{128}{figure.75}%
\contentsline {figure}{\numberline {76}{\ignorespaces Maximum vs Maximal Matching}}{129}{figure.76}%
